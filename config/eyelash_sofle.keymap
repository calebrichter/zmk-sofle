#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <dt-bindings/zmk/behaviors.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <100>;
    delay-ms = <0>;
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    mt_mo_kp: mt_mo_kp {
        compatible = "zmk,behavior-hold-tap";
        label = "MT_MO_KP";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        flavor = "balanced";
    };

    macros {
        macro_ctrl_bspc: macro_ctrl_bspc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp BSPC>;
        };

        macro_copy: macro_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        macro_paste: macro_paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        macro_cw: macro_cw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp LEFT>;
        };

        macro_sel_cw: macro_sel_cw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LSHFT>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LCTRL &kp LSHFT>;
        };

        macro_sel_cnw: macro_sel_cnw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LSHFT>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LCTRL &kp LSHFT>;
        };

        macro_cnw: macro_cnw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp RIGHT>;
        };

        macro_sel_home: macro_sel_home {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHFT &kp HOME>;
        };

        macro_sel_end: macro_sel_end {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHFT &kp END>;
        };

        macro_snippet: macro_snippet {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI &kp LSHFT>,
                <&macro_tap>,
                <&kp S>,
                <&macro_release>,
                <&kp LGUI &kp LSHFT>;
        };
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp ESC        &kp N1        &kp N2     &kp N3        &kp N4                 &kp N5     &mmv MOVE_UP     &kp N6     &kp N7     &kp N8   &kp N9       &kp N0     &kp LS(PIPE)
&kp GRAVE      &kp SQT       &kp COMMA  &kp DOT       &kp P                  &kp Y      &mmv MOVE_DOWN   &kp F      &kp G      &kp C    &kp R        &kp L      &kp FSLH
&mt LCTRL TAB  &kp A         &kp O      &kp E         &kp U                  &kp I      &mmv MOVE_LEFT   &kp D      &kp H      &kp T    &kp N        &kp S      &kp MINUS
&kp LSHFT      &kp SEMI      &kp Q      &kp J         &kp K                  &kp X      &mmv MOVE_RIGHT  &kp B      &kp M      &kp W    &kp V        &kp Z      &kp RGUI
&kp ESC        &kp LEFT_ALT  &mo 2      &kp LC(BSPC)  &mt_mo_kp 1 BACKSPACE  &kp RET    &mkp MB1         &kp SPACE  &kp RSHFT  &kp DEL  &kp LC(DEL)  &kp LCTRL
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
